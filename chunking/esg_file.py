import pdfplumber
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)+"./")))

sub_sector = [
    ["2.1 ขอบเขตการเปิดเผยการจัดการพลังงาน","2.2 ปริมาณการใช้ไฟฟ้าของบริษัท"],
    ["2.2 ปริมาณการใช้ไฟฟ้าของบริษัท", "2.3 ปริมาณการใช้ไฟฟ้าต่อหน่วยของบริษัท"],
    ["2.3 ปริมาณการใช้ไฟฟ้าต่อหน่วยของบริษัท","2.4 ค่าใช้จ่ายการใช้ไฟฟ้าของบริษัท"],
    ["2.4 ค่าใช้จ่ายการใช้ไฟฟ้าของบริษัท","2.5 ปริมาณการใช้น้ำมันและเชื้อเพลิงของบริษัท"],
    ["2.5 ปริมาณการใช้น้ำมันและเชื้อเพลิงของบริษัท","2.6 ค่าใช้จ่ายการใช้น้ำมันและเชื้อเพลิงของบริษัท"],
    ["2.6 ค่าใช้จ่ายการใช้น้ำมันและเชื้อเพลิงของบริษัท","2.7 ปริมาณการใช้พลังงานของบริษัท"],
    ["2.7 ปริมาณการใช้พลังงานของบริษัท","2.8 ปริมาณการใช้พลังงานต่อหน่วยของบริษัท"],
    ["2.8 ปริมาณการใช้พลังงานต่อหน่วยของบริษัท","3 การจัดการน้ำ"],

    ["3.1 ขอบเขตการเปิดเผยการจัดการน้ำ", "3.2 ปริมาณการใช้น้ำของบริษัท จำแนกตามแหล่งน้ำ"],
    ["3.2 ปริมาณการใช้น้ำของบริษัท จำแนกตามแหล่งน้ำ","3.3 ปริมาณน้ำทิ้งของบริษัท จำแนกตามแหล่งปล่อย"],
    ["3.3 ปริมาณน้ำทิ้งของบริษัท จำแนกตามแหล่งปล่อย","3.4 ปริมาณการใช้น้ำของบริษัท"],
    ["3.4 ปริมาณการใช้น้ำของบริษัท","3.5 ปริมาณการใช้น้ำต่อหน่วยของบริษัท"],
    ["3.5 ปริมาณการใช้น้ำต่อหน่วยของบริษัท","3.6 ค่าใช้จ่ายการใช้น้ำของบริษัท"],
    ["3.6 ค่าใช้จ่ายการใช้น้ำของบริษัท","4 การจัดการขยะและของเสีย"],
    
    # ["4 การจัดการขยะและของเสีย","4.1 ขอบเขตการเปิดเผยการจัดการขยะและของเสีย"],
    ["4.1 ขอบเขตการเปิดเผยการจัดการขยะและของเสีย", "4.2 ปริมาณขยะและของเสียของบริษัท"],
    ["4.2 ปริมาณขยะและของเสียของบริษัท", "4.3 ปริมาณขยะและของเสียที่นำไป Reuse/Recycle ของบริษัท"],
    ["4.3 ปริมาณขยะและของเสียที่นำไป Reuse/Recycle ของบริษัท", "5 การจัดการก๊าซเรือนกระจก"],

    # "5 การจัดการก๊าซเรือนกระจก",
    ["5.1 ขอบเขตการเปิดเผยการจัดการก๊าซเรือนกระจก","5.2 แผนการจัดการก๊าซเรือนกระจกของบริษัท"],
    # "5.2 แผนการจัดการก๊าซเรือนกระจกของบริษัท",
    ["5.3 ปริมาณการปล่อยก๊าซเรือนกระจกของบริษัท","5.4 ปริมาณการปล่อยก๊าซเรือนกระจกต่อหน่วยของบริษัท"],
    ["5.4 ปริมาณการปล่อยก๊าซเรือนกระจกต่อหน่วยของบริษัท","5.5 การทวนสอบปริมาณการปล่อยก๊าซเรือนกระจกของบริษัท"],
    ["5.5 การทวนสอบปริมาณการปล่อยก๊าซเรือนกระจกของบริษัท","5.6 ปริมาณการลดก๊าซเรือนกระจกของบริษัท"],
    ["5.6 ปริมาณการลดก๊าซเรือนกระจกของบริษัท","5.7 ปริมาณการดูดซับก๊าซเรือนกระจกของบริษัท"],
    ["5.7 ปริมาณการดูดซับก๊าซเรือนกระจกของบริษัท","หมายเหตุ - เอกสารฉบับนี้"],

    ["2.1 ขอบเขตการเปิดเผยการปฏิบัติต่อแรงงานอย่างเป็นธรรม", "2.2.1 จำนวนพนักงาน จำแนกตามเพศ"],
    ["2.2.1 จำนวนพนักงาน จำแนกตามเพศ", "2.2.2 จำนวนพนักงาน จำแนกตามอายุ"],
    ["2.2.2 จำนวนพนักงาน จำแนกตามอายุ", "2.2.3 จำนวนพนักงานชาย จำแนกตามอายุ"],
    ["2.2.3 จำนวนพนักงานชาย จำแนกตามอายุ", "2.2.4 จำนวนพนักงานหญิง จำแนกตามอายุ"],
    ["2.2.4 จำนวนพนักงานหญิง จำแนกตามอายุ", "2.2.5 จำนวนพนักงาน จำแนกตามระดับตำแหน่ง"],
    ["2.2.5 จำนวนพนักงาน จำแนกตามระดับตำแหน่ง", "2.2.6 จำนวนพนักงานชาย จำแนกตามระดับตำแหน่ง"],
    ["2.2.6 จำนวนพนักงานชาย จำแนกตามระดับตำแหน่ง", "2.2.7 จำนวนพนักงานหญิง จำแนกตามระดับตำแหน่ง"],
    ["2.2.7 จำนวนพนักงานหญิง จำแนกตามระดับตำแหน่ง", '2.2.8 การจ้างงานผู้พิการ'],
    ["2.2.8 การจ้างงานผู้พิการ", "2.3.1 ค่าตอบแทนของพนักงาน จำแนกตามเพศ"],
    ["2.3.1 ค่าตอบแทนของพนักงาน จำแนกตามเพศ", "2.3.2 ข้อมูลเกี่ยวกับกองทุนสำรองเลี้ยงชีพพนักงาน"],
    ["2.3.2 ข้อมูลเกี่ยวกับกองทุนสำรองเลี้ยงชีพพนักงาน", "2.4 การพัฒนาพนักงาน"], 
    ["2.4.1 ชั่วโมงอบรมความรู้เฉลี่ยของพนักงาน", "2.4.2 ค่าใช้จ่ายในการอบรมความรู้และพัฒนาพนักงาน"],
    ['2.4.2 ค่าใช้จ่ายในการอบรมความรู้และพัฒนาพนักงาน', "2.5 ความปลอดภัย อาชีวอนามัย และสภาพแวดล้อมในการทำงานของพนักงาน"],
    ["2.5.1 จำนวนชั่วโมงการทำงาน", "2.5.2 สถิติการบาดเจ็บหรืออุบัติเหตุจากการทำงาน"],
    ["2.5.2 สถิติการบาดเจ็บหรืออุบัติเหตุจากการทำงาน", "2.6 การส่งเสริมความสัมพันธ์และการมีส่วนร่วมกับพนักงาน"],
    ["2.6.1 จำนวนพนักงานที่ลาออกโดยความสมัครใจ จำแนกตามเพศ", "\n"],
]

def extractTable(file_name):
    with pdfplumber.open(file_name) as pdf:
        page_size = len(pdf.pages)
        buffer = []

        next = []
        for index in range(0,page_size):
            p = pdf.pages[index]
            d = p.extract_tables()
            
            for i in d:
                if not i[0][0].startswith("ข้อมูล"):
                    if i [0][0] != "รายละเอียด":
                        next = next + i
                    else:
                        buffer.append(next)
                        next = i
        buffer.append(next)
        del(buffer[0])

        table_index = 0
        table_extraction = []
        for i in buffer:
            if table_index == 39:       # Limiter Table
                break
            count = 0
            buffer_table = "\nรายละเอียด:\n"
            for j in i[1:]:
                for index in range(0, len(j)):
                    if j[index] == None:
                        count += 1
                    else:
                        if j[index].isnumeric():
                            start_year = int(j[index])
                        break
                des = j[:count]
                data = j[count:]
                year_offset = start_year
                for d in data:
                    if des[0] != None:
                        about = des[0].replace("\n","")
                        if count > 1:
                            buffer_table += f"{about} (ปี{year_offset}): {d} {des[1].replace("\n", "").replace(" ","")}\n"
                        else:
                            buffer_table += f"{about} (ปี{year_offset}): {d}\n"
                    year_offset += 1
            buffer_table += "==========\n"
            table_extraction.append(buffer_table)
            table_index += 1
            # Cut and stop page 19
        pdf.close()
    return table_extraction


def extractAll(file_name):
    table_extraction = extractTable(file_name)
    with pdfplumber.open(file_name) as pdf:
        page_size = len(pdf.pages)

        main_text = ""
        for index in range(0,page_size):
            p = pdf.pages[index]
            d = p.extract_text()
            main_text += d

    buffer = main_text
    count = 0
    for i in sub_sector:
        s = buffer.split(i[0])
        start = s[0] + i[0]
        ddd = s[1]
        dddd = ddd.split(i[1])[1]
        end = i[1] + dddd

        if count < len(sub_sector) -1 :
            buffer = start + table_extraction[count] + end
        else:
            buffer = start + table_extraction[count]
        count += 1

    social = buffer

    with pdfplumber.open(file_name) as pdf:
        page_size = len(pdf.pages)
        p = pdf.pages[page_size-1]
        main_text = p.extract_text()

    ge = main_text.split("นโยบายและกลยุทธ์ด้านความยั่งยืน")[1]

    return social + ge


def esgFileChunking():
    pass


if __name__ == "__main__":
    print(extractAll("/Users/peerasit/senior_project/STELLA-Backend/chunking/pdfs/bts_esg_2023.pdf"))
